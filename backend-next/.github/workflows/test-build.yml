name: Test && Build

on:
  pull_request:
    branches: [master]

jobs:
  install-and-cache:
    name: Run install and cache
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node_modules
        id: cached-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cached-node-modules.outputs.cache-hit != 'true'
        run: npm install

  unit_tests:
    name: Unit tests
    needs: [install-and-cache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore node_modules
        id: cached-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Unit tests
        run: npm run test

  api_tests:
    name: API tests
    needs: [install-and-cache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore node_modules
        id: cached-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: API tests
        env:
          MONGODB_URI: mongodb://localhost:27017/scicat
          EXPRESS_SESSION_SECRET: a_scicat_secret
          JWT_SECRET: a_scicat_secret
          PORT: 3000
          HTTP_MAX_REDIRECTS: 5
          HTTP_TIMEOUT: 5000
          JWT_EXPIRES_IN: 3600
          SITE: SAMPLE-SITE
          PID_PREFIX: PID.SAMPLE.PREFIX
          DOI_PREFIX: DOI.SAMPLE.PREFIX
          METADATA_KEYS_RETURN_LIMIT: 100
          METADATA_PARENT_INSTANCES_RETURN_LIMIT: 100
        # Start mongo container and app before running api tests
        run: |
          cp CI/ESS/docker-compose.api.yaml docker-compose.yaml
          docker-compose up --build -d
          npm run api:after:start

  e2e_tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run stack in docker-compose
        run: |
          cp CI/E2E/docker-compose.yaml docker-compose.yaml
          docker-compose pull
          docker-compose build --no-cache
          docker-compose up

      - name: Checkout frontend repo
        uses: actions/checkout@v3
        with:
          repository: scicatproject/frontend
          # NOTE: Change this to default branch later
          ref: SWAP-2894-fix-for-e2e-tests-after-migration
          path: frontend
          fetch-depth: 1

      - name: Run Cypress tests
        uses: cypress-io/github-action@v4
        with:
          working-directory: frontend
          config-file: CI/ESS/e2e/cypress.nestjs.json
          install-command: npm install --omit peer
          browser: chrome

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots/

      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: frontend/cypress/videos/

  build:
    name: Build and push Docker image with branch tag
    runs-on: ubuntu-latest
    needs: [unit_tests, api_tests, e2e_tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/scicatproject/backend-next
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # For debugging capture the selected branch
      - name: Branch
        run: echo "Branch ${{ github.head_ref }}"

      # Replace all slashes with underscore because github container registry does't accept slashes as valid tag names
      - name: Extract branch name without slashes
        id: extract_branch
        shell: bash
        run: |
          # Extract branch name
          BRANCH_NAME=${{ github.head_ref }}

          # set output variable accessible in the action
          echo ::set-output name=branch::${BRANCH_NAME} | sed 's/\//\_/g'

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/scicatproject/backend-next:${{ steps.extract_branch.outputs.branch }}
