# gives a docker image below 200 MB
FROM node:10.16.1-alpine

ENV http_proxy "http://192.168.1.1:8123"
ENV https_proxy $http_proxy
ENV no_proxy "localhost, 127.0.0.1"
RUN npm config set proxy  $http_proxy
RUN npm config set https-proxy  $http_proxy
RUN npm config set registry http://registry.npmjs.org/
RUN npm config set strict-ssl false


RUN apk update && apk upgrade && \
  apk add --no-cache git

ENV PORT 3000
EXPOSE 3000

# Prepare app directory
WORKDIR /usr/src/app
COPY package*.json /usr/src/app/
COPY .snyk /usr/src/app/

# set up local user to avoid running as root
RUN chown -R node:node /usr/src/app
USER node

# Install our packages
RUN npm ci

# Copy the rest of our application, node_modules is ignored via .dockerignore
COPY . /usr/src/app
COPY CI/ESS/envfiles/config.ess.js /usr/src/app/server/config.local.js
COPY CI/ESS/envfiles/middleware.json /usr/src/app/server/
RUN touch /usr/src/app/test/config/providers.json
COPY CI/ESS/envfiles/providers.unittests.json /usr/src/app/server/providers.json
COPY CI/ESS/envfiles/datasources.json /usr/src/app/server/
COPY CI/ESS/envfiles/component-config.json /usr/src/app/server/
RUN touch /usr/src/app/test/config/settings.json
COPY CI/ESS/envfiles/settings.sample.json /usr/src/app/test/config/settings.json
COPY CI/ESS/wait.sh /usr/src/app/
# no longer needed COPY CI/ESS/createIndex.js /usr/src/app/

# Start the app
CMD ["./wait.sh"]
