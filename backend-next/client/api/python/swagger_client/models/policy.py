# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.6.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Policy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, availability='low', tapeRetentionTime=10.0, autoArchiveDelay=7.0, ownerGroup=None, accessGroups=None, createdBy=None, updatedBy=None, id=None, createdAt=None, updatedAt=None):
        """
        Policy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'availability': 'str',
            'tapeRetentionTime': 'float',
            'autoArchiveDelay': 'float',
            'ownerGroup': 'str',
            'accessGroups': 'list[str]',
            'createdBy': 'str',
            'updatedBy': 'str',
            'id': 'ObjectID',
            'createdAt': 'datetime',
            'updatedAt': 'datetime'
        }

        self.attribute_map = {
            'availability': 'availability',
            'tapeRetentionTime': 'tapeRetentionTime',
            'autoArchiveDelay': 'autoArchiveDelay',
            'ownerGroup': 'ownerGroup',
            'accessGroups': 'accessGroups',
            'createdBy': 'createdBy',
            'updatedBy': 'updatedBy',
            'id': 'id',
            'createdAt': 'createdAt',
            'updatedAt': 'updatedAt'
        }

        self._availability = availability
        self._tapeRetentionTime = tapeRetentionTime
        self._autoArchiveDelay = autoArchiveDelay
        self._ownerGroup = ownerGroup
        self._accessGroups = accessGroups
        self._createdBy = createdBy
        self._updatedBy = updatedBy
        self._id = id
        self._createdAt = createdAt
        self._updatedAt = updatedAt

    @property
    def availability(self):
        """
        Gets the availability of this Policy.
        Defines the level of redundancy in storage to minimize loss of data. Allowed values are low, medium, high. Low could e.g. mean one tape copy only, medium could mean two tape copies and high two geo-redundant tape copies

        :return: The availability of this Policy.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """
        Sets the availability of this Policy.
        Defines the level of redundancy in storage to minimize loss of data. Allowed values are low, medium, high. Low could e.g. mean one tape copy only, medium could mean two tape copies and high two geo-redundant tape copies

        :param availability: The availability of this Policy.
        :type: str
        """

        self._availability = availability

    @property
    def tapeRetentionTime(self):
        """
        Gets the tapeRetentionTime of this Policy.
        Number of years after creation time, where datasets are subject to retention policies, possibly leading to deletion of data on tape.

        :return: The tapeRetentionTime of this Policy.
        :rtype: float
        """
        return self._tapeRetentionTime

    @tapeRetentionTime.setter
    def tapeRetentionTime(self, tapeRetentionTime):
        """
        Sets the tapeRetentionTime of this Policy.
        Number of years after creation time, where datasets are subject to retention policies, possibly leading to deletion of data on tape.

        :param tapeRetentionTime: The tapeRetentionTime of this Policy.
        :type: float
        """

        self._tapeRetentionTime = tapeRetentionTime

    @property
    def autoArchiveDelay(self):
        """
        Gets the autoArchiveDelay of this Policy.
        Number of days after dataset creation that (remaining) datasets are archived automatically

        :return: The autoArchiveDelay of this Policy.
        :rtype: float
        """
        return self._autoArchiveDelay

    @autoArchiveDelay.setter
    def autoArchiveDelay(self, autoArchiveDelay):
        """
        Sets the autoArchiveDelay of this Policy.
        Number of days after dataset creation that (remaining) datasets are archived automatically

        :param autoArchiveDelay: The autoArchiveDelay of this Policy.
        :type: float
        """

        self._autoArchiveDelay = autoArchiveDelay

    @property
    def ownerGroup(self):
        """
        Gets the ownerGroup of this Policy.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :return: The ownerGroup of this Policy.
        :rtype: str
        """
        return self._ownerGroup

    @ownerGroup.setter
    def ownerGroup(self, ownerGroup):
        """
        Sets the ownerGroup of this Policy.
        Defines the group which owns the data, and therefore has unrestricted access to this data. Usually a pgroup like p12151

        :param ownerGroup: The ownerGroup of this Policy.
        :type: str
        """
        if ownerGroup is None:
            raise ValueError("Invalid value for `ownerGroup`, must not be `None`")

        self._ownerGroup = ownerGroup

    @property
    def accessGroups(self):
        """
        Gets the accessGroups of this Policy.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :return: The accessGroups of this Policy.
        :rtype: list[str]
        """
        return self._accessGroups

    @accessGroups.setter
    def accessGroups(self, accessGroups):
        """
        Sets the accessGroups of this Policy.
        Optional additional groups which have read access to the data. Users which are member in one of the groups listed here are allowed to access this data. The special group 'public' makes data available to all users

        :param accessGroups: The accessGroups of this Policy.
        :type: list[str]
        """

        self._accessGroups = accessGroups

    @property
    def createdBy(self):
        """
        Gets the createdBy of this Policy.
        Functional or user account name who created this instance

        :return: The createdBy of this Policy.
        :rtype: str
        """
        return self._createdBy

    @createdBy.setter
    def createdBy(self, createdBy):
        """
        Sets the createdBy of this Policy.
        Functional or user account name who created this instance

        :param createdBy: The createdBy of this Policy.
        :type: str
        """

        self._createdBy = createdBy

    @property
    def updatedBy(self):
        """
        Gets the updatedBy of this Policy.
        Functional or user account name who last updated this instance

        :return: The updatedBy of this Policy.
        :rtype: str
        """
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, updatedBy):
        """
        Sets the updatedBy of this Policy.
        Functional or user account name who last updated this instance

        :param updatedBy: The updatedBy of this Policy.
        :type: str
        """

        self._updatedBy = updatedBy

    @property
    def id(self):
        """
        Gets the id of this Policy.

        :return: The id of this Policy.
        :rtype: ObjectID
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Policy.

        :param id: The id of this Policy.
        :type: ObjectID
        """

        self._id = id

    @property
    def createdAt(self):
        """
        Gets the createdAt of this Policy.

        :return: The createdAt of this Policy.
        :rtype: datetime
        """
        return self._createdAt

    @createdAt.setter
    def createdAt(self, createdAt):
        """
        Sets the createdAt of this Policy.

        :param createdAt: The createdAt of this Policy.
        :type: datetime
        """

        self._createdAt = createdAt

    @property
    def updatedAt(self):
        """
        Gets the updatedAt of this Policy.

        :return: The updatedAt of this Policy.
        :rtype: datetime
        """
        return self._updatedAt

    @updatedAt.setter
    def updatedAt(self, updatedAt):
        """
        Sets the updatedAt of this Policy.

        :param updatedAt: The updatedAt of this Policy.
        :type: datetime
        """

        self._updatedAt = updatedAt

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
