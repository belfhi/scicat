# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SynchTimes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, myid=None, lastSynchTime=None, lastSynchSN=None, affectedUsers=None, affectedGroups=None):
        """
        SynchTimes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'myid': 'float',
            'lastSynchTime': 'str',
            'lastSynchSN': 'float',
            'affectedUsers': 'list[str]',
            'affectedGroups': 'list[str]'
        }

        self.attribute_map = {
            'myid': 'myid',
            'lastSynchTime': 'lastSynchTime',
            'lastSynchSN': 'lastSynchSN',
            'affectedUsers': 'affectedUsers',
            'affectedGroups': 'affectedGroups'
        }

        self._myid = myid
        self._lastSynchTime = lastSynchTime
        self._lastSynchSN = lastSynchSN
        self._affectedUsers = affectedUsers
        self._affectedGroups = affectedGroups

    @property
    def myid(self):
        """
        Gets the myid of this SynchTimes.

        :return: The myid of this SynchTimes.
        :rtype: float
        """
        return self._myid

    @myid.setter
    def myid(self, myid):
        """
        Sets the myid of this SynchTimes.

        :param myid: The myid of this SynchTimes.
        :type: float
        """
        if myid is None:
            raise ValueError("Invalid value for `myid`, must not be `None`")

        self._myid = myid

    @property
    def lastSynchTime(self):
        """
        Gets the lastSynchTime of this SynchTimes.

        :return: The lastSynchTime of this SynchTimes.
        :rtype: str
        """
        return self._lastSynchTime

    @lastSynchTime.setter
    def lastSynchTime(self, lastSynchTime):
        """
        Sets the lastSynchTime of this SynchTimes.

        :param lastSynchTime: The lastSynchTime of this SynchTimes.
        :type: str
        """
        if lastSynchTime is None:
            raise ValueError("Invalid value for `lastSynchTime`, must not be `None`")

        self._lastSynchTime = lastSynchTime

    @property
    def lastSynchSN(self):
        """
        Gets the lastSynchSN of this SynchTimes.

        :return: The lastSynchSN of this SynchTimes.
        :rtype: float
        """
        return self._lastSynchSN

    @lastSynchSN.setter
    def lastSynchSN(self, lastSynchSN):
        """
        Sets the lastSynchSN of this SynchTimes.

        :param lastSynchSN: The lastSynchSN of this SynchTimes.
        :type: float
        """
        if lastSynchSN is None:
            raise ValueError("Invalid value for `lastSynchSN`, must not be `None`")

        self._lastSynchSN = lastSynchSN

    @property
    def affectedUsers(self):
        """
        Gets the affectedUsers of this SynchTimes.

        :return: The affectedUsers of this SynchTimes.
        :rtype: list[str]
        """
        return self._affectedUsers

    @affectedUsers.setter
    def affectedUsers(self, affectedUsers):
        """
        Sets the affectedUsers of this SynchTimes.

        :param affectedUsers: The affectedUsers of this SynchTimes.
        :type: list[str]
        """

        self._affectedUsers = affectedUsers

    @property
    def affectedGroups(self):
        """
        Gets the affectedGroups of this SynchTimes.

        :return: The affectedGroups of this SynchTimes.
        :rtype: list[str]
        """
        return self._affectedGroups

    @affectedGroups.setter
    def affectedGroups(self, affectedGroups):
        """
        Sets the affectedGroups of this SynchTimes.

        :param affectedGroups: The affectedGroups of this SynchTimes.
        :type: list[str]
        """

        self._affectedGroups = affectedGroups

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SynchTimes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
