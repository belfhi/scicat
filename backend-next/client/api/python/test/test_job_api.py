# coding: utf-8

"""
    dacat-api

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.5.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest

import swagger_client
from swagger_client.rest import ApiException
from swagger_client.apis.job_api import JobApi


class TestJobApi(unittest.TestCase):
    """ JobApi unit test stubs """

    def setUp(self):
        self.api = swagger_client.apis.job_api.JobApi()

    def tearDown(self):
        pass

    def test_job_count(self):
        """
        Test case for job_count

        Count instances of the model matched by where from the data source.
        """
        pass

    def test_job_create(self):
        """
        Test case for job_create

        Create a new instance of the model and persist it into the data source.
        """
        pass

    def test_job_create_change_stream_get_jobs_change_stream(self):
        """
        Test case for job_create_change_stream_get_jobs_change_stream

        Create a change stream.
        """
        pass

    def test_job_create_change_stream_post_jobs_change_stream(self):
        """
        Test case for job_create_change_stream_post_jobs_change_stream

        Create a change stream.
        """
        pass

    def test_job_delete_by_id(self):
        """
        Test case for job_delete_by_id

        Delete a model instance by {{id}} from the data source.
        """
        pass

    def test_job_exists_get_jobsid_exists(self):
        """
        Test case for job_exists_get_jobsid_exists

        Check whether a model instance exists in the data source.
        """
        pass

    def test_job_exists_head_jobsid(self):
        """
        Test case for job_exists_head_jobsid

        Check whether a model instance exists in the data source.
        """
        pass

    def test_job_find(self):
        """
        Test case for job_find

        Find all instances of the model matched by filter from the data source.
        """
        pass

    def test_job_find_by_id(self):
        """
        Test case for job_find_by_id

        Find a model instance by {{id}} from the data source.
        """
        pass

    def test_job_find_one(self):
        """
        Test case for job_find_one

        Find first instance of the model matched by filter from the data source.
        """
        pass

    def test_job_patch_or_create(self):
        """
        Test case for job_patch_or_create

        Patch an existing model instance or insert a new one into the data source.
        """
        pass

    def test_job_prototype_patch_attributes(self):
        """
        Test case for job_prototype_patch_attributes

        Patch attributes for a model instance and persist it into the data source.
        """
        pass

    def test_job_replace_by_id_post_jobsid_replace(self):
        """
        Test case for job_replace_by_id_post_jobsid_replace

        Replace attributes for a model instance and persist it into the data source.
        """
        pass

    def test_job_replace_by_id_put_jobsid(self):
        """
        Test case for job_replace_by_id_put_jobsid

        Replace attributes for a model instance and persist it into the data source.
        """
        pass

    def test_job_replace_or_create_post_jobs_replace_or_create(self):
        """
        Test case for job_replace_or_create_post_jobs_replace_or_create

        Replace an existing model instance or insert a new one into the data source.
        """
        pass

    def test_job_replace_or_create_put_jobs(self):
        """
        Test case for job_replace_or_create_put_jobs

        Replace an existing model instance or insert a new one into the data source.
        """
        pass

    def test_job_update_all(self):
        """
        Test case for job_update_all

        Update instances of the model matched by {{where}} from the data source.
        """
        pass

    def test_job_upsert_with_where(self):
        """
        Test case for job_upsert_with_where

        Update an existing model instance or insert a new one into the data source based on the where criteria.
        """
        pass


if __name__ == '__main__':
    unittest.main()
